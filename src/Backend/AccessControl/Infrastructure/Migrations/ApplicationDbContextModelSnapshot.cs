// <auto-generated />
using System;
using AccessControl.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccessControl.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.RoleModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("rol_role_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("rol_description");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("rol_disabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("rol_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("RoleId");

                    b.HasIndex("Name", "DeletedAt")
                        .IsUnique();

                    b.ToTable("role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("33aed42e-7a15-4bc0-bdf0-cf36ae6aeb91"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6775),
                            Description = "Admin role",
                            Disabled = false,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("137bcadf-79bb-47f4-8622-e7381c7664ae"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6795),
                            Description = "User role",
                            Disabled = false,
                            Name = "User"
                        },
                        new
                        {
                            RoleId = new Guid("67f32155-4dcd-4661-8351-f832ba54b911"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6800),
                            Description = "Guest role",
                            Disabled = false,
                            Name = "Guest"
                        },
                        new
                        {
                            RoleId = new Guid("4d5ae754-400d-4fd1-ba59-012a01236ef3"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6805),
                            Description = "SuperAdmin role",
                            Disabled = false,
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            RoleId = new Guid("7bb9ebb0-5b29-4a29-9d60-ebdb50905ec4"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6809),
                            Description = "Moderator role",
                            Disabled = false,
                            Name = "Moderator"
                        },
                        new
                        {
                            RoleId = new Guid("6163f52d-61a3-47bd-b4b2-f4c77ffda98f"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6815),
                            Description = "Editor role",
                            Disabled = false,
                            Name = "Editor"
                        },
                        new
                        {
                            RoleId = new Guid("1df5437f-e9e3-4513-bbe3-5314c0ff377f"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6819),
                            Description = "Author role",
                            Disabled = false,
                            Name = "Author"
                        },
                        new
                        {
                            RoleId = new Guid("20f1cc27-6209-473f-a859-976f4a29c2d4"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6823),
                            Description = "Contributor role",
                            Disabled = false,
                            Name = "Contributor"
                        },
                        new
                        {
                            RoleId = new Guid("3d509fab-78f3-478e-886b-7e186dda6b8a"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6828),
                            Description = "Subscriber role",
                            Disabled = false,
                            Name = "Subscriber"
                        },
                        new
                        {
                            RoleId = new Guid("a325a098-1540-46bc-9966-311be6654f03"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6833),
                            Description = "Member role",
                            Disabled = false,
                            Name = "Member"
                        },
                        new
                        {
                            RoleId = new Guid("65011f4d-a1b8-404e-85a0-669a1f877f81"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6837),
                            Description = "Customer role",
                            Disabled = false,
                            Name = "Customer"
                        },
                        new
                        {
                            RoleId = new Guid("9d3a6c36-cef3-4308-a8d3-127a914996c3"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6841),
                            Description = "Client role",
                            Disabled = false,
                            Name = "Client"
                        },
                        new
                        {
                            RoleId = new Guid("ea767216-d8f3-4fec-b0fb-4c00a4864cb3"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6845),
                            Description = "Viewer role",
                            Disabled = false,
                            Name = "Viewer"
                        },
                        new
                        {
                            RoleId = new Guid("70f58873-e57d-422e-9284-3d9bf5e6606c"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6849),
                            Description = "Tester role",
                            Disabled = false,
                            Name = "Tester"
                        },
                        new
                        {
                            RoleId = new Guid("d599de0a-fcef-4933-81e4-49712bc69b62"),
                            CreatedAt = new DateTime(2024, 6, 6, 1, 12, 12, 908, DateTimeKind.Utc).AddTicks(6853),
                            Description = "Developer role",
                            Disabled = false,
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("usr_user_id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("usr_city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean")
                        .HasColumnName("usr_disabled");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("usr_email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("usr_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("usr_password");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("usr_photo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.HasIndex("Email", "DeletedAt")
                        .IsUnique();

                    b.HasIndex("Email", "Password");

                    b.ToTable("user");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserPerRoleModel", b =>
                {
                    b.Property<Guid>("UserPerRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("upr_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("upr_role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("upr_user_id");

                    b.HasKey("UserPerRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique();

                    b.ToTable("user_per_role");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserPerRoleModel", b =>
                {
                    b.HasOne("AccessControl.Infrastructure.Persistence.Models.RoleModel", "Role")
                        .WithMany("UserPerRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AccessControl.Infrastructure.Persistence.Models.UserModel", "User")
                        .WithMany("UserPerRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.RoleModel", b =>
                {
                    b.Navigation("UserPerRoles");
                });

            modelBuilder.Entity("AccessControl.Infrastructure.Persistence.Models.UserModel", b =>
                {
                    b.Navigation("UserPerRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
